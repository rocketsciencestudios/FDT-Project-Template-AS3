#!/bin/bash

# First some misc. utlities.

full_pathname () {
  cd `dirname $1`
  echo `pwd`/`basename $1`
}

setup_script_vars () {
  SNAME=`full_pathname $0`
  SHOME="`dirname $SNAME`"
}

usage () {
  cat <<EOF
$0 <args>
  -p <url>                 -- Move browser to this page
  -j <javascript expr>     -- evaluate this expression
  -e <javascript expr>     -- enter's the object before running the script
  -c                       -- equivalent to: -e content
  -l <javascript filename> -- load javascript file, done prior to any -e
  -t <javascript expr>     -- where to load later -l files into, default is repl
  -b                       -- double the size of match buffer
  -v                       -- run verbose
  -h                       -- this help message
EOF
}

JLOADS='1'
jload () {
  JLOADS="$JLOADS, $1"
}

JSCRIPT='1'
jscript () {
  JSCRIPT="$JSCRIPT, $1"
}

BUFFER=65536
WHERE='repl._creationContext'
VERBOSE=0
LOADTARGET=repl

# Initailize, parse commands, build the script to execute
setup_script_vars
jscript "FresnoRoot='file://localhost$SHOME/'";
jload   "FresnoRoot='file://localhost$SHOME/'";
jload   "repl.load(FresnoRoot + 'js/init.js', $LOADTARGET)";
while [ $# -gt 0 ] ; do
 A=$1;  shift
 case "x$A" in
 x-h) usage; exit 1 ;;
 x-p) jscript "getBrowser().loadURI('$1')"; shift;;
 x-j) jscript "$1"; shift ;;
 x-c) WHERE=content; ;;
 x-e) WHERE="$1"; shift ;;
 x-t) LOADTARGET="$1"; shift ;;
 x-l) jscript "repl.load('file://localhost' + '`full_pathname $1`', $LOADTARGET)"; shift ;;
 x-v) VERBOSE=1 ;;
 x-b) BUFFER=`echo "2 * $BUFFER" | bc`;;
 *) echo "ERROR: Unknown argument $A"; usage; exit 1 ;;
 esac
done

if [ $VERBOSE == 0 ] ; then
  doOutput='send_user $expect_out(1,string)'
else
  doOutput=''
fi

# Main.
expect <<EOF
set result 0
log_user $VERBOSE
log_file /tmp/fresno.log
match_max $BUFFER
spawn telnet localhost 4242
expect_before {
  timeout { send_user "FAIL: Time out\n"; exit 1 }
  eof { send_user "FAIL: EOF on connection\n"; exit 1 }
  -ex "....> " { send_user "FAIL: syntax error\n"; exit 1 }
  -re "repl\[0-9]*> $" {}}
expect ; send "repl.enter($WHERE)\r"
expect ; send "(function(){ return($JLOADS) })()\r"
expect ; send "(function(){ return($JSCRIPT) })()\r"
expect "(function(){ return($JSCRIPT) })()\r\n"
expect_before {
  timeout { send_user "FAIL: Time out\n"; exit 1 }
  eof { send_user "FAIL: EOF on connection\n"; exit 1 }
  -ex "....> " { send_user "FAIL: syntax error\n"; exit 1 }
  -re "^(.*)repl\[0-9]*> \$" { $doOutput; }
  -re "^(.+)$" { $doOutput; exp_continue; }
}
expect ; send "repl.quit()\r"
EOF
